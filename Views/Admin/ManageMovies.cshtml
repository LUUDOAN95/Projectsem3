@model IEnumerable<eproject3.Models.Generated.Movie>

@{
    ViewData["Title"] = "Manage Movies";
}

<div class="container mt-4">
    <h1>Manage Movies</h1>
    
    <div class="mb-3">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMovieModal">
            Add New Movie
        </button>
    </div>
    
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Title</th>
                <th>Release Date</th>
                <th>Duration</th>
                <th>Features</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in Model)
            {
                <tr>
                    <td>@movie.MovieId</td>
                    <td>
                        <img src="@movie.CoverImage" alt="@movie.Title" style="height: 50px; width: auto;" />
                    </td>
                    <td>@movie.Title</td>
                    <td>@(movie.ReleaseDate?.ToString("MM/dd/yyyy") ?? "Not specified")</td>
                    <td>@movie.Duration min</td>
                    <td>
                        @if (movie.IsHot == true)
                        {
                            <span class="badge bg-danger">Hot</span>
                        }
                        @if (movie.IsPopular == true)
                        {
                            <span class="badge bg-success">Popular</span>
                        }
                    </td>
                    <td>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-primary edit-movie-btn" 
                                    data-id="@movie.MovieId" 
                                    data-title="@movie.Title" 
                                    data-description="@movie.Description" 
                                    data-duration="@movie.Duration"
                                    data-release-date="@(movie.ReleaseDate?.ToString("yyyy-MM-dd") ?? "")"
                                    data-trailer="@movie.TrailerUrl"
                                    data-is-hot="@movie.IsHot"
                                    data-is-popular="@movie.IsPopular"
                                    data-bs-toggle="modal" 
                                    data-bs-target="#editMovieModal">
                                Edit
                            </button>
                            <button type="button" class="btn btn-sm btn-info manage-showtimes-btn"
                                    data-id="@movie.MovieId"
                                    data-title="@movie.Title"
                                    data-bs-toggle="modal"
                                    data-bs-target="#manageShowtimesModal">
                                Showtimes
                            </button>
                            <form asp-action="DeleteMovie" method="post" style="display: inline;">
                                <input type="hidden" name="id" value="@movie.MovieId" />
                                <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this movie?');">
                                    Delete
                                </button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Add Movie Modal -->
<div class="modal fade" id="addMovieModal" tabindex="-1" aria-labelledby="addMovieModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form asp-action="AddMovie" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="addMovieModalLabel">Add New Movie</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="title" class="form-label">Movie Title</label>
                                <input type="text" class="form-control" id="title" name="title" required>
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="duration" class="form-label">Duration (minutes)</label>
                                <input type="number" class="form-control" id="duration" name="duration" required>
                            </div>
                            <div class="mb-3">
                                <label for="releaseDate" class="form-label">Release Date</label>
                                <input type="date" class="form-control" id="releaseDate" name="releaseDate" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="trailerUrl" class="form-label">Trailer URL</label>
                                <input type="url" class="form-control" id="trailerUrl" name="trailerUrl">
                            </div>
                            <div class="mb-3">
                                <label for="coverFile" class="form-label">Cover Image</label>
                                <input type="file" class="form-control" id="coverFile" name="coverFile">
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="isHot" name="isHot" value="true">
                                <label class="form-check-label" for="isHot">Mark as Hot</label>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="isPopular" name="isPopular" value="true">
                                <label class="form-check-label" for="isPopular">Mark as Popular</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Movie Modal -->
<div class="modal fade" id="editMovieModal" tabindex="-1" aria-labelledby="editMovieModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form asp-action="EditMovie" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="editMovieModalLabel">Edit Movie</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editMovieId" name="movieId">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editTitle" class="form-label">Movie Title</label>
                                <input type="text" class="form-control" id="editTitle" name="title" required>
                            </div>
                            <div class="mb-3">
                                <label for="editDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="editDescription" name="description" rows="3" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="editDuration" class="form-label">Duration (minutes)</label>
                                <input type="number" class="form-control" id="editDuration" name="duration" required>
                            </div>
                            <div class="mb-3">
                                <label for="editReleaseDate" class="form-label">Release Date</label>
                                <input type="date" class="form-control" id="editReleaseDate" name="releaseDate">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editTrailerUrl" class="form-label">Trailer URL</label>
                                <input type="url" class="form-control" id="editTrailerUrl" name="trailerUrl">
                            </div>
                            <div class="mb-3">
                                <label for="editCoverFile" class="form-label">Cover Image</label>
                                <input type="file" class="form-control" id="editCoverFile" name="coverFile">
                                <small class="text-muted">Leave empty to keep current image</small>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="editIsHot" name="isHot" value="true">
                                <label class="form-check-label" for="editIsHot">Mark as Hot</label>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="editIsPopular" name="isPopular" value="true">
                                <label class="form-check-label" for="editIsPopular">Mark as Popular</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Manage Showtimes Modal -->
<div class="modal fade" id="manageShowtimesModal" tabindex="-1" aria-labelledby="manageShowtimesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="manageShowtimesModalLabel">Manage Showtimes for <span id="showtimesMovieTitle"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-12">
                        <button type="button" class="btn btn-success" id="addShowtimeBtn">
                            <i class="bi bi-plus-circle"></i> Add New Showtime
                        </button>
                    </div>
                </div>
                
                <div id="showtimesFormContainer" class="mb-4" style="display: none;">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0" id="showtimeFormTitle">Add New Showtime</h5>
                        </div>
                        <div class="card-body">
                            <form id="showtimeForm">
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="showtimeMovieId" name="movieId">
                                <input type="hidden" id="showtimeId" name="showtimeId">
                                
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label for="showDate" class="form-label">Show Date</label>
                                            <input type="date" class="form-control" id="showDate" name="showDate" required>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label for="startTime" class="form-label">Start Time</label>
                                            <input type="time" class="form-control" id="startTime" name="startTime" required>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label for="hallNumber" class="form-label">Hall Number</label>
                                            <input type="number" class="form-control" id="hallNumber" name="hallNumber" min="1" required>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label for="ticketPrice" class="form-label">Ticket Price ($)</label>
                                            <input type="number" class="form-control" id="ticketPrice" name="ticketPrice" step="0.01" min="0" required>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label for="availableSeats" class="form-label">Available Seats</label>
                                            <input type="number" class="form-control" id="availableSeats" name="availableSeats" min="1" required>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-12">
                                        <button type="button" id="saveShowtimeBtn" class="btn btn-primary">Save Showtime</button>
                                        <button type="button" id="cancelShowtimeBtn" class="btn btn-secondary">Cancel</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-bordered" id="showtimesTable">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Date</th>
                                <th>Time</th>
                                <th>Hall</th>
                                <th>Price</th>
                                <th>Available Seats</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="showtimesTableBody">
                            <!-- Showtimes will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle edit movie button clicks
            document.querySelectorAll('.edit-movie-btn').forEach(button => {
                button.addEventListener('click', function() {
                    // Fill the edit modal with data from data attributes
                    document.getElementById('editMovieId').value = this.getAttribute('data-id');
                    document.getElementById('editTitle').value = this.getAttribute('data-title');
                    document.getElementById('editDescription').value = this.getAttribute('data-description');
                    document.getElementById('editDuration').value = this.getAttribute('data-duration');
                    document.getElementById('editReleaseDate').value = this.getAttribute('data-release-date');
                    document.getElementById('editTrailerUrl').value = this.getAttribute('data-trailer');
                    
                    // Set checkbox values
                    document.getElementById('editIsHot').checked = this.getAttribute('data-is-hot') === 'True';
                    document.getElementById('editIsPopular').checked = this.getAttribute('data-is-popular') === 'True';
                });
            });
            
            // Handle manage showtimes button clicks
            document.querySelectorAll('.manage-showtimes-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const movieId = this.getAttribute('data-id');
                    const movieTitle = this.getAttribute('data-title');
                    
                    // Set the movie title in the modal header
                    document.getElementById('showtimesMovieTitle').textContent = movieTitle;
                    document.getElementById('showtimeMovieId').value = movieId;
                    
                    // Load showtimes for this movie
                    loadShowtimes(movieId);
                });
            });
            
            // Handle add showtime button click
            document.getElementById('addShowtimeBtn').addEventListener('click', function() {
                // Show the form container
                document.getElementById('showtimesFormContainer').style.display = 'block';
                document.getElementById('showtimeFormTitle').textContent = 'Add New Showtime';
                
                // Reset the form
                document.getElementById('showtimeForm').reset();
                document.getElementById('showtimeId').value = '';
                
                // Set movie ID from the hidden field
                const movieId = document.getElementById('showtimeMovieId').value;
                document.getElementById('showtimeMovieId').value = movieId;
            });
            
            // Handle cancel showtime button click
            document.getElementById('cancelShowtimeBtn').addEventListener('click', function() {
                document.getElementById('showtimesFormContainer').style.display = 'none';
            });
            
            // Handle save showtime button click
            document.getElementById('saveShowtimeBtn').addEventListener('click', function() {
                const form = document.getElementById('showtimeForm');
                if (form.checkValidity()) {
                    const showtimeId = document.getElementById('showtimeId').value;
                    const movieId = document.getElementById('showtimeMovieId').value;
                    const showDate = document.getElementById('showDate').value;
                    const startTime = document.getElementById('startTime').value;
                    const hallNumber = document.getElementById('hallNumber').value;
                    const ticketPrice = document.getElementById('ticketPrice').value;
                    const availableSeats = document.getElementById('availableSeats').value;
                    
                    // Format date to ISO string without time component
                    const formattedDate = new Date(showDate);
                    const isoDate = formattedDate.toISOString().split('T')[0];
                    
                    // Prepare data for AJAX request
                    const data = {
                        showtimeId: showtimeId ? parseInt(showtimeId) : 0,
                        movieId: parseInt(movieId),
                        showDate: isoDate,
                        startTime: startTime,
                        hallNumber: parseInt(hallNumber),
                        ticketPrice: parseFloat(ticketPrice),
                        availableSeats: parseInt(availableSeats)
                    };
                    
                    console.log('Sending showtime data:', data); // Debug
                    
                    // Determine if this is an add or edit operation
                    const url = showtimeId ? '/Admin/EditShowtimeJson' : '/Admin/AddShowtimeJson';
                    
                    // Send AJAX request
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok: ' + response.statusText);
                        }
                        
                        // Check the content type of the response
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            return response.json();
                        } else {
                            // Handle non-JSON response (likely an error page)
                            return response.text().then(text => {
                                console.error('Received non-JSON response:', text);
                                throw new Error('Server returned an invalid response format');
                            });
                        }
                    })
                    .then(data => {
                        console.log('Response:', data); // Debug
                        if (data.success) {
                            // Hide the form
                            document.getElementById('showtimesFormContainer').style.display = 'none';
                            
                            // Reload showtimes
                            loadShowtimes(movieId);
                            
                            // Show success message
                            alert(data.message);
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while saving the showtime: ' + error.message);
                    });
                } else {
                    form.reportValidity();
                }
            });
            
            function loadShowtimes(movieId) {
                // Clear the table body
                const tableBody = document.getElementById('showtimesTableBody');
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center">Loading showtimes...</td></tr>';
                
                // Fetch showtimes for the movie
                fetch(`/Admin/GetShowtimesByMovie?movieId=${movieId}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    
                    // Check the content type of the response
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        return response.json();
                    } else {
                        // Handle non-JSON response (likely an error page)
                        return response.text().then(text => {
                            console.error('Received non-JSON response:', text);
                            throw new Error('Server returned an invalid response format');
                        });
                    }
                })
                .then(data => {
                    if (data.length === 0) {
                        tableBody.innerHTML = '<tr><td colspan="7" class="text-center">No showtimes found for this movie.</td></tr>';
                        return;
                    }
                    
                    // Clear the table
                    tableBody.innerHTML = '';
                    
                    // Add rows for each showtime
                    data.forEach(showtime => {
                        const row = document.createElement('tr');
                        
                        // Format date and time
                        const date = new Date(showtime.showDate);
                        const formattedDate = date.toLocaleDateString();
                        
                        // Create table cells
                        row.innerHTML = `
                            <td>${showtime.showtimeId}</td>
                            <td>${formattedDate}</td>
                            <td>${formatTime(showtime.startTime)}</td>
                            <td>${showtime.hallNumber}</td>
                            <td>$${showtime.ticketPrice.toFixed(2)}</td>
                            <td>${showtime.availableSeats}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary edit-showtime-btn" 
                                        data-id="${showtime.showtimeId}"
                                        data-date="${showtime.showDate.split('T')[0]}"
                                        data-time="${showtime.startTime.substring(0, 5)}"
                                        data-hall="${showtime.hallNumber}"
                                        data-price="${showtime.ticketPrice}"
                                        data-seats="${showtime.availableSeats}">
                                    Edit
                                </button>
                                <button type="button" class="btn btn-sm btn-danger delete-showtime-btn" 
                                        data-id="${showtime.showtimeId}">
                                    Delete
                                </button>
                            </td>
                        `;
                        
                        tableBody.appendChild(row);
                    });
                    
                    // Add event listeners to edit and delete buttons
                    addShowtimeButtonListeners();
                })
                .catch(error => {
                    console.error('Error:', error);
                    tableBody.innerHTML = `<tr><td colspan="7" class="text-center">Error loading showtimes: ${error.message}</td></tr>`;
                });
            }
            
            function addShowtimeButtonListeners() {
                // Add event listeners to edit showtime buttons
                document.querySelectorAll('.edit-showtime-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        // Show the form container
                        document.getElementById('showtimesFormContainer').style.display = 'block';
                        document.getElementById('showtimeFormTitle').textContent = 'Edit Showtime';
                        
                        // Fill the form with data from data attributes
                        document.getElementById('showtimeId').value = this.getAttribute('data-id');
                        document.getElementById('showDate').value = this.getAttribute('data-date');
                        document.getElementById('startTime').value = this.getAttribute('data-time');
                        document.getElementById('hallNumber').value = this.getAttribute('data-hall');
                        document.getElementById('ticketPrice').value = this.getAttribute('data-price');
                        document.getElementById('availableSeats').value = this.getAttribute('data-seats');
                    });
                });
                
                // Add event listeners to delete showtime buttons
                document.querySelectorAll('.delete-showtime-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        if (confirm('Are you sure you want to delete this showtime?')) {
                            const showtimeId = this.getAttribute('data-id');
                            const movieId = document.getElementById('showtimeMovieId').value;
                            
                            console.log('Deleting showtime:', showtimeId); // Debug
                            
                            // Send AJAX request to delete the showtime
                            fetch(`/Admin/DeleteShowtimeJson?id=${showtimeId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                                }
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok: ' + response.statusText);
                                }
                                
                                // Check the content type of the response
                                const contentType = response.headers.get('content-type');
                                if (contentType && contentType.includes('application/json')) {
                                    return response.json();
                                } else {
                                    // Handle non-JSON response (likely an error page)
                                    return response.text().then(text => {
                                        console.error('Received non-JSON response:', text);
                                        throw new Error('Server returned an invalid response format');
                                    });
                                }
                            })
                            .then(data => {
                                console.log('Response:', data); // Debug
                                if (data.success) {
                                    // Reload showtimes
                                    loadShowtimes(movieId);
                                    
                                    // Show success message
                                    alert(data.message);
                                } else {
                                    alert('Error: ' + data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('An error occurred while deleting the showtime: ' + error.message);
                            });
                        }
                    });
                });
            }
            
            function formatTime(timeString) {
                // Format time with AM/PM
                const [hours, minutes] = timeString.split(':');
                const hour = parseInt(hours);
                const ampm = hour >= 12 ? 'PM' : 'AM';
                const hour12 = hour % 12 || 12;
                return `${hour12}:${minutes} ${ampm}`;
            }
        });
    </script>
} 